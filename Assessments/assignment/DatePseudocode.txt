BEGIN CLASS Date
    CLASS FIELDS:
        dayOfMonth (Integer)
        monthOfYear (Integer)
        year (Integer)
    END CLASS FIELDS

    METHODS:
        CONSTRUCTOR WITH PARAMETERS
        IMPORT: pDay (Integer), pMonth (Integer), pYear (Integer)
        EXPORT: None
        ASSERTION: Create Date object with values received from user
        ALGORITHM:
            setYear(pYear)
            setMonthOfYear(pMonth)
            IF checkMonth(pMonth) EQUALS true
                IF checkDay(pDay, pMonth) EQUALS true
                    dayOfMonth <- pDay
                ELSE
                    THROW EXCEPTION ("Day value passed to param constructor
                         is not valid given the month and/or year provided.")
                ENDIF
            ENDIF
            setDayOfMonth(pDay)
        END CONSTRUCTOR WITH PARAMETERS

        COPY CONSTRUCTOR
        IMPORT: pDate (Date)
        EXPORT: None
        ASSERTION: Create a copy of imported Date object
        ALGORITHM:
            dayOfMonth <- pDate.getDayOfMonth()
            monthOfYear <- pDate.getMonthOfYear()
            getYear <- pDate.getYear()
        END COPY CONSTRUCTOR

        DEFAULT CONSTRUCTOR
        IMPORT: None
        EXPORT: None
        ASSERTION: Creates a Date object with default values
        ALGORITHM:
            dayOfMonth <- 1
            monthOfYear <- 1
            year <- 2011
        END DEFAULT CONSTRUCTOR

        ACCESSOR: getDayOfMonth
        IMPORT: None
        EXPORT: day (Integer)
        ASSERTION: Returns the integer value representing the day
        ALGORITHM:
            RETURN dayofMonth
        END ACCESSOR getDayOfMonth
        
        ACCESSOR: getMonthOfYear
        IMPORT: None
        EXPORT: month (Integer)
        ASSERTION: Returns the integer value representing the month
        ALGORITHM:
            RETURN monthOfYear
        END ACCESSOR getMonthOfYear

        ACCESSOR: getYear
        IMPORT: None
        EXPORT: year (Integer)
        ASSERTION: Returns the integer value representing the year
        ALGORITHM:
            RETURN year
        END ACCESSOR getYear

        ACCESSOR: toString
        IMPORT: None
        EXPORT: dateString (String)
        ASSERTION: Returns a string representation of the state of date object
        ALGORITHM:
            dateString <- "Full date: " + dayOfMonth + "/" + monthOfYear + 
                                                                    "/" + year
            RETURN dateString
        END ACCESSOR toString

        ACCESSOR: equals
        IMPORT: inObject (Object)
        EXPORT: isEqual (Boolean)
        ASSERTION: Returns true if the two objects are equivalent
        ALGORITHM:
            isEqual <- false
            IF inObject IS Date OBJECT
                TRANSFORM inObject TO Date NAMED inDate
                IF dayOfMonth EQUALS inDate.getDayOfMonth()
                    IF monthOfYear EQUALS inDate.getMonthOfYear()
                        IF year EQUALS inDate.getYear()
                            isEqual <- true
                        ENDIF
                    ENDIF
                ENDIF
            ENDIF
            RETURN isEqual
        END ACCESSOR equals

        MUTATOR: setDayOfMonth
        IMPORT: pDay (Integer)
        EXPORT: None
        ASSERTION: Value of dayOfMonth attribute will be updated to pDay
        ALGORITHM:
            IF checkDay(pDay, monthOfYear) EQUALS true
                dayOfMonth <- pDay
            ELSE
                THROW EXCEPTION("Integer received for dayOfMonth 
                                                    class field is not valid")
            ENDIF
        END MUTATOR setDayOfMonth
    
        MUTATOR: setMonthOfYear
        IMPORT: pMonth (Integer)
        EXPORT: None
        ASSERTION: Value of monthOfYear attribute will be updated to pMonth
        ALGORITHM:
            IF checkMonth(pMonth) EQUALS true
                monthOfYear <- pMonth
            ELSE
                THROW EXCEPTION ("Integer received for monthOfYear 
                                                    class field is not valid")
            ENDIF
        END MUTATOR setMonthOfYear
        
        MUTATOR: setYear
        IMPORT: pYear (Integer)
        EXPORT: None
        ASSERTION: Value of year attribute will be updated to pYear
        ALGORITHM:
            IF checkYear(pYear) EQUALS true
                year <- pYear
            ELSE
                THROW EXCEPTION ("Integer received for year class field is not valid")
            ENDIF
        END MUTATOR setYear

        METHOD: isLeapYear
        IMPORT: None
        EXPORT: leapYear (Boolean)
        ASSERTION: Return a boolean value representing whether year is a leap year
        ALGORITHM:
            leapYear <- false
            IF year DIVIDED BY 4 EQUALS WHOLE NUMBER
                leapYear <- true
            ENDIF
            RETURN leapYear
        END METHOD isLeapYear

        METHOD: checkDay
        IMPORT: pDay (Integer), pMonth (Integer)
        EXPORT: validDay (Boolean)
        ASSERTION: Return a boolean value representing if pDay exists with pMonth
        ALGORITHM:
            minDays <- 1
            maxDays <- 0
            m <- pMonth
            leapYear <- isLeapYear()
            validDay <- false

            IF m EQUALS 1 OR 3 OR 5 OR 7 OR 8 OR 10 OR 12
                maxDays <- 31
            ELSEIF m EQUALS 4 OR 6 OR 9 OR 11
                maxDays <- 30
            ELSEIF m EQUALS 2
                IF leapYear
                    maxDays <- 29
                ELSE
                    maxDays <- 28
                ENDIF
            ENDIF

            IF pDay IS GREATER OR EQUAL TO minDays AND pDay LESS OR EQUAL TO maxDays
                validDay <- true
            ENDIF
            RETURN validDay
        END METHOD checkDay

        METHOD: checkMonth
        IMPORT: pMonth (Integer)
        EXPORT: validMonth (Boolean)
        ASSERTION: Return a boolean value representing whether pMonth is valid
        ALGORITHM:
            validMonth <- false
            IF pMonth IS GREATER THAN OR EQUAL TO 1 AND LESS THAN OR EQUAL TO 12
                validMonth <- true
            ENDIF
            RETURN validMonth
        END METHOD checkMonth

        METHOD: checkYear
        IMPORT: pYear (Integer)
        EXPORT: validYear (Boolean)
        ASSERTION: Returns boolean representing whether pYear is valid
        ALGORITHM:
            validYear <- false
            IF pYear IS GREATER THAN 0
                validYear <- true
            ENDIF
            RETURN validYear
        END METHOD checkYear

    END METHODS
END CLASS Date
