CLASS Date
    CLASS FIELDS:
        dayOfMonth (Integer)
        monthOfYear (Integer)
        year (Integer)
    END CLASS FIELDS

    METHODS:
        CONSTRUCTOR WITH PARAMETERS
        IMPORT: pDay (Integer), pMonth (Integer), pYear (Integer)
        EXPORT: None
        ASSERTION: Create Date object with values received from user
        ALGORITHM:
            setYear(pYear)
            setMonthOfYear(pMonth)
            setDayOfMonth(pDay)
        END CONSTRUCTOR WITH PARAMETERS

        COPY CONSTRUCTOR
        IMPORT: pDate (Date)
        EXPORT: None
        ASSERTION: Create a copy of imported Date object
        ALGORITHM:
            dayOfMonth = pDate.getDayOfMonth()
            monthOfYear = pDate.getMonthOfYear()
            getYear = pDate.getYear()
        END COPY CONSTRUCTOR

        DEFAULT CONSTRUCTOR
        IMPORT: None
        EXPORT: None
        ASSERTION: Creates a Date object with default values
        ALGORITHM:
            dayOfMonth = 1
            monthOfYear = 1
            year = 1111
        END DEFAULT CONSTRUCTOR

        ACCESSOR: getDayOfMonth
        IMPORT: None
        EXPORT: day (Integer)
        ASSERTION: Returned the integer value representing the day
        ALGORITHM:
            RETURN dayofMonth
        END ACCESSOR getDayOfMonth
        
        ACCESSOR: getMonthOfYear
        IMPORT: None
        EXPORT: month (Integer)
        ASSERTION: Returned the integer value representing the month
        ALGORITHM:
            RETURN monthOfYear
        END ACCESSOR getMonthOfYear

        ACCESSOR: getYear
        IMPORT: None
        EXPORT: year (Integer)
        ASSERTION: Returned the integer value representing the year
        ALGORITHM:
            RETURN year
        END ACCESSOR getYear

        MUTATOR: setDayOfMonth
        IMPORT: pDay (Integer)
        EXPORT: None
        ASSERTION: Value of dayOfMonth attribute will be updated to pDay
        ALGORITHM:
            minDays <- 1
            maxDays <- 0
            leapYear <- isLeapYear()

            IF monthOfYear EQUALS 1 OR 3 OR 5 OR 7 OR 8 OR 10 OR 12
                maxDays <- 31
            ELSEIF monthOfYear EQUALS 4 OR 6 OR 9 OR 11
                maxDays <- 30
            ELSEIF monthOfYear EQUALS 2
                IF leapYear
                    maxDays <- 29
                ELSE
                    maxDays <- 28
                ENDIF
            ENDIF

            IF pDay IS GREATER OR EQUAL TO minDays AND pDay LESS OR EQUAL TO maxDays
                dayOfMonth <- pDay    
            ENDIF
        END MUTATOR setDayOfMonth
    
        MUTATOR: setMonthOfYear
        IMPORT: pMonth (Integer)
        EXPORT: None
        ASSERTION: Value of monthOfYear attribute will be updated to pMonth
        ALGORITHM:
            IF pMonth IS GREATER OR EQUAL TO 1 AND LESS THAN OR EQUAL TO 12
                monthOfYear <- pMonth
            ENDIF
        END MUTATOR setMonthOfYear
        
        MUTATOR: setYear
        IMPORT: pYear (Integer)
        EXPORT: None
        ASSERTION: Value of year attribute will be updated to value of pYear
        ALGORITHM:
            IF pYear IS GREATER THAN 0
                year <- pYear
            ENDIF
        END MUTATOR setYear

        METHOD: toString
        IMPORT: None
        EXPORT: dateString (String)
        ASSERTION: Returns a string representation of the state of date object
        ALGORITHM:
            dateString <- "The date is " + dayOfMonth + "/" + monthOfYear + 
                                                                    "/" + year
            RETURN dateString
        END METHOD toString

        METHOD: isLeapYear
        IMPORT: None
        EXPORT: leapYear (Boolean)
        ASSERTION: Return a boolean value representing whether current year 
                                                                is a leap year
        ALGORITHM:
            leapYear <- false
            IF year DIVIDED BY 4 EQUALS WHOLE NUMBER
                leapYear <- true
            ENDIF
            RETURN leapYear
        END METHOD isLeapYear

    END METHODS
END CLASS Date
