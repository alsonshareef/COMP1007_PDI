BEGIN CLASS CovidCase
    CLASS FIELDS:
        country (String)
        province (String)
        region (String)
        ageGroup (String)
        sex (String)
        cases (Integer)
        date (Object)
    END CLASS FIELDS

    METHODS:
        CONSTRUCTOR WITH PARAMETERS
        IMPORT: pCountry (String), pProvince (String), pRegion (String), 
                pAgeGroup (String), pSex (String), pCases (Integer),
                pDay (Integer), pMonth (Integer), pYear (Integer)
        EXPORT: None
        ASSERTION: Create CovidCase object with values received from user
        ALGORITHM:
            setCountry(pCountry)
            setProvince(pProvince)
            setRegion(pRegion)
            setAgeGroup(pAgeGroup)
            setSex(pSex)
            setCases(pCases)
            date EQUALS NEW Date(pDay, pMonth, pYear)
        END CONSTRUCTOR WITH PARAMETERS

        COPY CONSTRUCTOR
        IMPORT: pCovidCase (CovidCase)
        EXPORT: None
        ASSERTION: Create a copy of imported CovidCase object
        ALGORITHM:
            country <- pCovidCase.getCountry()
            province <- pCovidCase.getProvince()
            region <- pCovidCase.getRegion()
            ageGroup <- pCovidCase.getAgeGroup()
            sex <- pCovidCase.getSex()
            cases <- pCovidCase.getCases()
            date <- pCovidCase.getDate()
        END COPY CONSTRUCTOR

        DEFAULT CONSTRUCTOR
        IMPORT: None
        EXPORT: None
        ASSERTION: Creates a CovidCase object with default values
        ALGORITHM:
            country <- "Belgium"
            province <- "Antwerpen"
            region <- "Flanders"
            ageGroup <- "40-49"
            sex <- "M"
            cases <- 5
            TRY
                date <- NEW Date(1,3,2020)
            CATCH EXCEPTION error
                PROMPT "EXCEPTION IN DEFAULT CONSTRUCTOR" + error
                PROMPT "Not able to aggregate Date class into class field"
        END DEFAULT CONSTRUCTOR

        ACCESSOR: getCountry
        IMPORT: None
        EXPORT: country (String)
        ASSERTION: Returns the string value representing country
        ALGORITHM:
            RETURN country
        END ACCESSOR getCountry
        
        ACCESSOR: getProvince
        IMPORT: None
        EXPORT: province (String)
        ASSERTION: Returns the string value representing the province
        ALGORITHM:
            RETURN province
        END ACCESSOR getProvince

        ACCESSOR: getRegion
        IMPORT: None
        EXPORT: region (String)
        ASSERTION: Returns the string value representing the region
        ALGORITHM:
            RETURN region
        END ACCESSOR getRegion

        ACCESSOR: getAgeGroup
        IMPORT: None
        EXPORT: ageGroup (String)
        ASSERTION: Returns the string value representing the age group
        ALGORITHM:
            RETURN ageGroup
        END ACCESSOR getAgeGroup
        
        ACCESSOR: getSex
        IMPORT: None
        EXPORT: sex (String)
        ASSERTION: Returns the string value representing the sex of covid cases
        ALGORITHM:
            RETURN sex
        END ACCESSOR getSex

        ACCESSOR: getCases
        IMPORT: None
        EXPORT: cases (Integer)
        ASSERTION: Returns the integer value representing the number of covid cases
        ALGORITHM:
            RETURN cases
        END ACCESSOR getCases

        ACCESSOR: getDate
        IMPORT: None
        EXPORT: date (Date)
        ASSERTION: Returns the object representing the date the covid case was found
        ALGORITHM:
            RETURN COPY OF date
        END ACCESSOR getDate

        ACCESSOR: toString
        IMPORT: None
        EXPORT: covidCaseString (String)
        ASSERTION: Returns a string representation of the state of CovidCase object
        ALGORITHM:
            covidCaseString <- "COVID CASE DETAILS" +
                                "Country: " + country +
                                "Province: " + province +
                                "Region: " + region +
                                "Age Group: " + ageGroup +
                                "Sex: " + sex +
                                "Cases: " + cases +
                                "Covid Case " + date.toString()
            RETURN covidCasteString
        END ACCESSOR toString

        ACCESSOR: equals
        IMPORT: inObject (Object)
        EXPORT: isEqual (Boolean)
        ASSERTION: Returns true if the two objects are equivalent
        ALGORITHM:
            isEqual <- false
            IF inObject IS CovidCase
                TRANSFORM inObject TO CovidCase NAMED inCovidCase
                IF country EQUALS inCovidCase.getCountry()
                    IF province EQUALS inCovidCase.getProvince()
                        IF region EQUALS inCovidCase.getRegion()
                            IF ageGroup EQUALS inCovidCase.getAgeGroup()
                                IF sex EQUALS inCovidCase.getSex()
                                    IF cases EQUALS inCovidCase.getCases()
                                        IF date EQUALS inCovidCase.getDate()
                                            isEqual <- true
                                        ENDIF
                                    ENDIF
                                ENDIF
                            ENDIF
                        ENDIF
                    ENDIF
                ENDIF
            ENDIF
            RETURN isEqual
        END ACCESSOR equals

        MUTATOR: setCountry
        IMPORT: pCountry (String)
        EXPORT: None
        ASSERTION: Value of country attribute will be updated to pCountry
        ALGORITHM:
            IF (IsNull(pCountry) EQUALS true)
                country <- "NA"
            ELSE
                country <- pCountry
            ENDIF
            PROMPT "Country class field successfully updated."
        END MUTATOR setCountry
    
        MUTATOR: setProvince
        IMPORT: pProvince (String)
        EXPORT: None
        ASSERTION: Value of province attribute will be updated to pProvince
        ALGORITHM:
            IF (IsNull(pProvince) EQUALS true)
                province <- "NA"
            ELSE
                province <- pProvince
            ENDIF
            PROMPT "Province class field successfully updated."           
        END MUTATOR setProvince
        
        MUTATOR: setRegion
        IMPORT: pRegion (String)
        EXPORT: None
        ASSERTION: Value of region attribute will be updated to pRegion
        ALGORITHM:
            IF (IsNull(pRegion) EQUALS true)
                region <- "NA"
            ELSE
                region <- pRegion
            ENDIF
            PROMPT "Region class field successfully updated."                      
        END MUTATOR setRegion

        MUTATOR: setAgeGroup
        IMPORT: pAgeGroup (String)
        EXPORT: None
        ASSERTION: Value of ageGroup attribute will be updated to pAgeGroup
        ALGORITHM:
            IF (isNull(pAgeGroup) EQUALS true)
                ageGroup <- "NA"
            ELSE
                IF (checkAgeGroup(pAgeGroup) EQUALS true)
                    ageGroup <- pAgeGroup
                    PROMPT "Age Group class field successfully updated."
                ELSE
                    THROW EXCEPTION ("Data in Age Group category was invalid")
                ENDIF
            ENDIF
        END MUTATOR setAgeGroup   

        MUTATOR: setSex
        IMPORT: pSex (String)
        EXPORT: None
        ASSERTION: Value of sex attribute will be updated to pSex
        ALGORITHM:
            IF (isNull(pSex) EQUALS true)
                sex <- "NA"
            ELSE
                IF (checkSex(pSex) EQUALS true)
                    IF (pSex EQUALS "M" OR pSex EQUALS "m")
                        sex <- "M"
                    ELSE
                        sex <- "F"
                    ENDIF
                    PROMPT "Sex class field successfully updated."
                ELSE
                    THROW EXCEPTION ("Data in Sex category was invalid")
                ENDIF
            ENDIF           
        END MUTATOR setSex

        MUTATOR: setCases
        IMPORT: pCases (Integer)
        EXPORT: None
        ASSERTION: Value of cases attribute will be updated to pCases
        ALGORITHM:
            IF pCases IS GREATER THAN -1
                cases <- pCases
                PROMPT "Cases class field successfully updated"
            ELSE
                THROW EXCEPTION ("Data in cases category was invalid")
            ENDIF
        END MUTATOR setCases

        MUTATOR: setDate
        IMPORT: pDay (Integer), pMonth (Integer), pYear (Integer)
        EXPORT: None
        ASSERTION: Value of date attribute will be updated to Date object with
                   the attribute values being equal to pDay, pMonth and pYear
        ALGORITHM:
            TRY
                date <- NEW Date (pDay, pMonth, pYear)
            CATCH EXCEPTION e
                THROW EXCEPTION ("Not able to create new Date object and
                                 set to date class field in Covid Case object")
        END MUTATOR setDate
        
        METHOD: isNull
        IMPORT: pString (String)
        EXPORTS: notNull (Boolean)
        ASSERTION: Returns boolean representing if pString is null
        ALGORITHM:
            nullCheck <- false
            IF pString EQUALS null
                nullCheck <- true
            ENDIF
            RETURN nullCheck
        END METHOD isNull

        METHOD: checkAgeGroup
        IMPORTS: pAgeGroup (String)
        EXPORTS: validAgeGroup (Boolean)
        ASSERTION: Returns boolean representing if pAgeGroup is valid
        ALGORITHM:
            validAgeGroup <- false
            ag <- pAgeGroup
            IF (ag EQUALS "0-9" OR "10-19" OR "20-29" OR "30-39" OR "40-49" OR 
                            "50-59" OR "60-69" OR "70-79" OR "80-89" OR "90+")
                validAgeGroup <- true
            ENDIF
            RETURN validAgeGroup
        END METHOD checkAgeGroup

        METHOD: checkSex
        IMPORT: pSex (String)
        EXPORTS: validSex (Boolean)
        ASSERTION: Returns boolean representing if pSex is valid
        ALGORITHM:
            validSex <- false
            IF (pSex EQUALS "M" OR "m" OR "F" OR "f")
                validSex <- true
            ENDIF
            RETURN validSex
        END METHOD checkSex

    END METHODS
END CLASS CovidCase
